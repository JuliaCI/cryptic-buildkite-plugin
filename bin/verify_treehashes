#!/usr/bin/env bash

## This file exists just as a simple sanity check for the user, and for debugging purposes.

# Load common tools
CRYPTIC_REPO="$( dirname "$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )" )"
source "${CRYPTIC_REPO}/lib/common.sh"

# This reads in command-line parameters such as PRIVATE_KEY_PATH, REPO_ROOT, etc...
source "${CRYPTIC_REPO}/lib/encrypt_decrypt_prologue.sh"

# This loads in YAML extraction prologues
source "${CRYPTIC_REPO}/lib/yaml_extraction_prologue.sh"

# We need the public key, not the private key.  But since we're lazy and don't want to change
# the parsing rules, we'll just re-generate the public key from the private one here.
PUBLIC_KEY_PATH=$(mktemp)
openssl rsa -in "${PRIVATE_KEY_PATH}" -pubout -out "${PUBLIC_KEY_PATH}" 2>/dev/null

# Extract treehash glob patterns from the YAML
readarray -t PIPELINE_TREEHASH_TRIPLETS < <(extract_pipeline_treehashes "${YAML_PATH}")

# Start printing out the helpful debugging messages
cat <<-EOD
    Parsed out ${#PIPELINE_TREEHASH_TRIPLETS[@]} pipelines being launched.
    Verifying signatures...

EOD

# Decrypt encrypted variables
SHOULD_FAIL="false"
for TRIPLET in "${PIPELINE_TREEHASH_TRIPLETS[@]}"; do
    PIPELINE_PATH="$(cut -d'&' -f1 <<<"${TRIPLET}" | tr -d '"')"
    PIPELINE_TREEHASH="$(cut -d'&' -f2 <<<"${TRIPLET}" | tr -d '"')"
    PIPELINE_ENCRYPTED_TREEHASH="$(cut -d'&' -f3 <<<"${TRIPLET}" | tr -d '"')"
    PIPELINE_TREEHASH_FILESOURCE="$(cut -d'&' -f4 <<<"${TRIPLET}" | tr -d '"')"

    # Write embedded encrypted treehash out to file
    PIPELINE_DECRYPTED_TREEHASH="$(base64dec <<<"${PIPELINE_ENCRYPTED_TREEHASH}" | decrypt_aes_key_then_decrypt "${PRIVATE_KEY_PATH}" "${REPO_KEY_PATH}")"
    if [[ "${PIPELINE_DECRYPTED_TREEHASH}" == "${PIPELINE_TREEHASH}" ]]; then
        echo "        ${PIPELINE_PATH}: ✔️"
    else
        echo "        ${PIPELINE_PATH}: ❌"
        SHOULD_FAIL="true"
    fi
done

# Clean up some temporary files
rm -f "${PUBLIC_KEY_PATH}"

if [[ ${SHOULD_FAIL} != "false" ]]; then
    exit 1
fi
