#!/usr/bin/env bash

## This file exists just as a simple sanity check for the user, and for debugging purposes.

# Load common tools
CRYPTIC_REPO="$( dirname "$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )" )"
source "${CRYPTIC_REPO}/lib/common.sh"

# This reads in command-line parameters such as PRIVATE_KEY_PATH, REPO_ROOT, etc...
source "${CRYPTIC_REPO}/lib/encrypt_decrypt_prologue.sh"

# This loads in YAML extraction prologues
source "${CRYPTIC_REPO}/lib/yaml_extraction_prologue.sh"


# Extract treehash glob patterns from the YAML
readarray -t PIPELINE_TREEHASH_TRIPLETS < <(extract_pipeline_treehashes "${YAML_PATH}")

# Output helpful messages to the user
cat <<-EOD
    Parsed out ${#PIPELINE_TREEHASH_TRIPLETS[@]} pipelines being launched.
    Printing out exemplar plugin stanzas:

EOD

# Decrypt encrypted variables
for TRIPLET in "${PIPELINE_TREEHASH_TRIPLETS[@]}"; do
    PIPELINE_PATH="$(cut -d'&' -f1 <<<"${TRIPLET}" | tr -d '"')"
    PIPELINE_TREEHASH="$(cut -d'&' -f2 <<<"${TRIPLET}" | tr -d '"')"
    # We don't extract any pre-existing PIPELINE_ENCRYPTED_TREEHASH values
    PIPELINE_TREEHASH_FILESOURCE="$(cut -d'&' -f4 <<<"${TRIPLET}" | tr -d '"')"

    PIPELINE_ENCRYPTED_TREEHASH="$(decrypt_aes_key_then_encrypt "${PRIVATE_KEY_PATH}" "${REPO_KEY_PATH}" <<<"${PIPELINE_TREEHASH}" | base64enc)"
    if [[ -f "${PIPELINE_TREEHASH_FILESOURCE}" ]]; then
        base64dec <<<"${PIPELINE_ENCRYPTED_TREEHASH}" >"${PIPELINE_TREEHASH_FILESOURCE}"
        cat <<-EOD
            - pipeline: ${PIPELINE_PATH}
              signature_file: ${PIPELINE_TREEHASH_FILESOURCE}
              ...

EOD
    else
        cat <<-EOD
            - pipeline: ${PIPELINE_PATH}
              signature: ${PIPELINE_ENCRYPTED_TREEHASH}
              ...

EOD
    fi
done
