#!/usr/bin/env bash

## post-command hook: This hook implements treehash verification and pipeline launching

# Load common tools
CRYPTIC_REPO="$( cd "$( dirname "$( dirname "${BASH_SOURCE[0]}" )" )" &> /dev/null && pwd )"
source "${CRYPTIC_REPO}/lib/common.sh"

# If we're not authorized, quit out immediately
if [[ "${BUILDKITE_PLUGIN_CRYPTIC_PRIVILEGED:-false}" != "true" ]]; then
    echo "Exiting immediately, as we're not privileged"
    exit 0
fi

# If the command hook failed, quit out immediately
if [[ "$BUILDKITE_COMMAND_EXIT_STATUS" != "0" ]]; then
    echo "Exiting immediately, as the command block reported an error"
    exit 0
fi

# Receive keys from agent environment hook
receive_keys

# Collect all the signed and unsigned pipeline configurations we have
readarray -d '' -t UNSIGNED_PIPELINES < <(collect_buildkite_array "BUILDKITE_PLUGIN_CRYPTIC_UNSIGNED_PIPELINES")
readarray -d '' -t SIGNED_PIPELINES < <(collect_buildkite_array "BUILDKITE_PLUGIN_CRYPTIC_SIGNED_PIPELINES" "PIPELINE")

# Immediately launch all the unsigned pipelines
for PIPELINE_PATH in "${UNSIGNED_PIPELINES[@]}"; do
    # Explicitly _do not_ provide the signed job id for unsigned pipelines
    BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET= buildkite-agent pipeline upload "${PIPELINE_PATH}"
done

SHOULD_FAIL=false
for PIPELINE_IDX in "${!SIGNED_PIPELINES[@]}"; do
    PIPELINE_PATH="${SIGNED_PIPELINES[${PIPELINE_IDX}]}"
    SANITIZED_PIPELINE_PATH="$(basename "${PIPELINE_PATH}" | tr '/' '-' | tr '.' '-' | tr ' ' '_')"

    # Perform sanity checks such as ensuring that this pipeline will receive the key
    if [[ -z "$(grep "BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET" "${PIPELINE_PATH}")" ]]; then
        (die "Pipeline ${PIPELINE_PATH} does not contain an env mapping for BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET!"; ) || true
        SHOULD_FAIL=true
        continue
    fi

    # Hash up the inputs
    readarray -d '' -t PIPELINE_INPUTS < <(collect_buildkite_array "BUILDKITE_PLUGIN_CRYPTIC_SIGNED_PIPELINES_${PIPELINE_IDX}_INPUTS")
    vecho " -> Performing pipeline launch:"
    vecho "    -> ${PIPELINE_PATH}"
    INPUT_TREEHASHES=( "$(calc_treehash <<<"${PIPELINE_PATH}")" )
    for PATTERN in "${PIPELINE_INPUTS[@]}"; do
        HASH="$(collect_glob_pattern "${PATTERN}" | calc_treehash)"
        vecho "       + ${HASH} <- ${PATTERN}"
        INPUT_TREEHASHES+=( "${HASH}" )
    done

    # Hash all treehashes together to get full input hash
    FULL_TREEHASH="$(printf "%s" "${INPUT_TREEHASHES[@]}" | calc_shasum)"
    vecho "       âˆŸ ${FULL_TREEHASH}"

    # Verify this with the treehash signature
    SIGNATURE_VAR="BUILDKITE_PLUGIN_CRYPTIC_SIGNED_PIPELINES_${PIPELINE_IDX}_SIGNATURE"
    SIGNATURE_FILE_VAR="BUILDKITE_PLUGIN_CRYPTIC_SIGNED_PIPELINES_${PIPELINE_IDX}_SIGNATURE_FILE"

    # Die if we don't have any signatures
    if [[ ! -v "${SIGNATURE_VAR}" ]] && [[ ! -v "${SIGNATURE_FILE_VAR}" ]]; then
        # Execute `die` in a subshell so that we can print out failure messages for each pipeline,
        # then fail out once at the end, ignoring the `exit` and failure that it creates.
        (die "Locked pipeline '${PIPELINE_PATH}' must define either 'signature' or 'signature_file'"; ) || true
        SHOULD_FAIL=true
        continue
    fi

    # If both are provided, just use the signature_file
    if [[ -v "${SIGNATURE_FILE_VAR}" ]]; then
        SIGNATURE_FILE="${!SIGNATURE_FILE_VAR}"
    else
        SIGNATURE_FILE=$(mktemp)
        base64dec <<<"${!SIGNATURE_VAR}" >"${SIGNATURE_FILE}"
    fi
    if [[ "$(decrypt_aes "${UNENCRYPTED_REPO_KEY_PATH}" <"${SIGNATURE_FILE}")" != "${FULL_TREEHASH}" ]]; then
        SIGNATURE_FAIL_MSG="Pipeline '${PIPELINE_PATH}' fails treehash signature check!  You may need to re-run cryptic/bin/sign_treehashes!"

        HASH_OVERRIDE_VAR="BUILDKITE_PLUGIN_CRYPTIC_SIGNED_PIPELINES_${PIPELINE_IDX}_ALLOW_HASH_OVERRIDE"
        if [[ -v "${HASH_OVERRIDE_VAR}" ]] && [[ "${!HASH_OVERRIDE_VAR}" == "true" ]]; then
            # If we allow committers to override the failing hash check, create a `block` step, then still launch it.
            # To do so, we require each of the pipeline's steps to contain a `depends_on` node:
            NUM_STEPS=$( (grep -E "^  - " "${PIPELINE_PATH}" || true) | wc -l)
            NUM_DEPENDS_ON=$( (grep -E "^    depends_on:" "${PIPELINE_PATH}" || true) | wc -l)
            if [[ "${NUM_DEPENDS_ON}" -lt "${NUM_STEPS}" ]]; then
                (die "Refusing to continue execution; pipeline '${PIPELINE_PATH}' looks like it lacks some 'depends_on' nodes!"; ) || true
                SHOULD_FAIL=true
            fi

            # Notify the user that they probably need to re-sign something
            BLOCK_KEY="cryptic-block-${SANITIZED_PIPELINE_PATH}"
            buildkite-agent annotate --style=warning --context="${BLOCK_KEY}" "${SIGNATURE_FAIL_MSG}"

            cat "${PIPELINE_PATH}" |
                # Insert a block step as the first step in this pipeline
                sed -e "s&^steps:\(.*\)&steps:\\1\n  - block: \"Bypass failed signature check for '${PIPELINE_PATH}'?\"\n    blocked_state: \"running\"\n    key: \"${BLOCK_KEY}\"&" |
                # Each other step in the secure pipeline _must_ have a `depends_on`, which we then add to:
                sed -e "s&^    depends_on:&    depends_on:\n      - \"${BLOCK_KEY}\"\n&" > "${PIPELINE_PATH}.block"
            echo "Printing out altered pipeline:"
            cat "${PIPELINE_PATH}.block"
            PIPELINE_PATH="${PIPELINE_PATH}.block"
        else
            # Execute `die` in a subshell so that we can print out failure messages for each pipeline,
            # then fail out once at the end, ignoring the `exit` and failure that it creates.
            (die "${SIGNATURE_FAIL_MSG}"; ) || true
            SHOULD_FAIL=true
            continue
        fi
    fi

    # If we passed, try to launch the pipeline!
    echo " -> Launching ${PIPELINE_PATH}"
    buildkite-agent pipeline upload "${PIPELINE_PATH}"
done

# Clean up the values we're not using anymore
cleanup_keys

# This is used to allow us to fail at the end, after trying all pipelines
if [[ "${SHOULD_FAIL}" != "false" ]]; then
    exit 1
fi
