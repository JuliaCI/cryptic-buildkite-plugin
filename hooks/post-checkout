#!/bin/bash

## post-checkout hook: This hook performs the actual decryption of secrets

# Load common tools
CRYPTIC_REPO="$( cd "$( dirname "$( dirname "${BASH_SOURCE[0]}" )" )" &> /dev/null && pwd )"
source "${CRYPTIC_REPO}/lib/common.sh"

# If we're not authorized, quit out immediately
if [[ "${BUILDKITE_PLUGIN_CRYPTIC_PRIVILEGED:-false}" != "true" ]]; then
    echo "Exiting immediately, as we're not privileged"
    exit 0
fi

# If we think we are authorized, let's check to make sure that our secret keys are actually valid
PRIVATE_KEY_PATH=$(mktemp)
base64dec <<<"${BUILDKITE_PLUGIN_CRYPTIC_BASE64_AGENT_PRIVATE_KEY_SECRET}" >"${PRIVATE_KEY_PATH}"
if ! is_rsa_private_key "${PRIVATE_KEY_PATH}"; then
    die "Invalid RSA private key passed from agent environment hook!"
fi

PUBLIC_KEY_PATH=$(mktemp)
base64dec <<<"${BUILDKITE_PLUGIN_CRYPTIC_BASE64_AGENT_PUBLIC_KEY_SECRET}" >"${PUBLIC_KEY_PATH}"
if ! is_rsa_private_key "${PRIVATE_KEY_PATH}"; then
    die "Invalid RSA private key passed from agent environment hook!"
fi

# Search for repository key based off of the private key fingerprint
RSA_FINGERPRINT=$(rsa_fingerprint "${PRIVATE_KEY_PATH}")
REPO_KEY_PATH=".buildkite/cryptic_repo_keys/repo_key.${RSA_FINGERPRINT:0:8}"
if [[ ! -f "${REPO_KEY_PATH}" ]]; then
    die "Cannot find expected repo key at '${REPO_KEY_PATH}'!  Ensure you have added the repository key to ${BUILDKITE_REPO}"
fi
UNENCRYPTED_REPO_KEY_PATH=$(mktemp)
decrypt_rsa "${PRIVATE_KEY_PATH}" < "${REPO_KEY_PATH}" > "${UNENCRYPTED_REPO_KEY_PATH}"


# Collect lists of files and variables we need to decrypt
readarray -d '' -t ENCRYPTED_VARIABLES < <(collect_buildkite_array "BUILDKITE_PLUGIN_CRYPTIC_VARIABLES")
readarray -d '' -t ENCRYPTED_FILES < <(collect_buildkite_array "BUILDKITE_PLUGIN_CRYPTIC_FILES")

# Decrypt each file
echo "--- :unlock: Decrypt files"
for FILE_PATH in "${ENCRYPTED_FILES[@]}"; do
    ENC_FILE_PATH="${FILE_PATH}.encrypted"
    if [[ ! -f "${ENC_FILE_PATH}" ]]; then
        die "Unable to find file '${ENC_FILE_PATH}' which we have been asked to decrypt!"
    fi
    if [[ -f "${FILE_PATH}" ]]; then
        die "Decrypted file '${FILE_PATH}' already exists in repository?!"
    fi

    echo " -> Decrypting ${FILE_PATH}"
    decrypt_aes_key_then_decrypt "${PRIVATE_KEY_PATH}" "${REPO_KEY_PATH}" <"${ENC_FILE_PATH}" >"${FILE_PATH}"
done

# Decrypt each secret environment variable
echo "--- :unlock: Decrypt environment variables"
for PAIR in "${ENCRYPTED_VARIABLES[@]}"; do
    VARNAME="$(echo ${PAIR%%=*} | tr -d '"')"
    SECRET_VALUE_BASE64="$(echo ${PAIR#*=} | tr -d '"')"

    echo " -> Decrypting ${VARNAME}"
    VALUE="$(base64dec <<<"${SECRET_VALUE_BASE64}" | decrypt_aes_key_then_decrypt "${PRIVATE_KEY_PATH}" "${REPO_KEY_PATH}")"
    
    export "${VARNAME}"="${VALUE}"
done

# Sign the initial buildkite job ID, for future launch needs
export BUILDKITE_PLUGIN_CRYPTIC_SIGNED_JOB_ID_BASE64=$(echo "${BUILDKITE_INITIAL_JOB_ID}" | sign_rsa "${PRIVATE_KEY_PATH}" | base64enc)

# Clean up public/private key paths
shred -u "${PRIVATE_KEY_PATH}" "${PUBLIC_KEY_PATH}" "${UNENCRYPTED_REPO_KEY_PATH}"

# Even though we consider the current pipeline as "privileged", we're going to wipe out the following variables,
# so as to minimize the chance of an accidental `set` leaking things that noone should see.
unset BUILDKITE_PLUGIN_CRYPTIC_BASE64_AGENT_PRIVATE_KEY_SECRET
unset BUILDKITE_PLUGIN_CRYPTIC_BASE64_AGENT_PUBLIC_KEY_SECRET
unset UNENCRYPTED_REPO_KEY_PATH
unset PRIVATE_KEY_PATH
unset PUBLIC_KEY_PATH
